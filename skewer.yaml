title: Trade Zoo
subtitle: A simple trading application that runs in the public cloud but keeps its data in a private Kafka cluster
github_actions_url: https://github.com/skupperproject/skupper-example-trade-zoo/actions/workflows/main.yaml
overview: |
  This example is a simple Kafka application that shows how you can
  use Skupper to access a Kafka cluster at a remote site without
  exposing it to the public internet.

  It contains four services:

  * A Kafka cluster running in a private data center.  The cluster has
    two topics, "orders" and "updates".

  * An order processor running in the public cloud.  It consumes from
    "orders", matching buy and sell offers to make trades.  It
    publishes new and updated orders and trades to "updates".

  * A market data service running in the public cloud.  It looks at
    the completed trades and computes the latest and average prices,
    which it then publishes to "updates".

  * A web frontend service running in the public cloud.  It submits
    buy and sell orders to "orders" and consumes from "updates" in
    order to show what's happening.

  To set up the Kafka cluster, this example uses the Kubernetes
  operator from the [Strimzi][strimzi] project.  The other services
  are small Python programs.

  The example uses two Kubernetes namespaces, "private" and "public",
  to represent the private data center and public cloud.

  [strimzi]: https://strimzi.io/
sites:
  public:
    kubeconfig: ~/.kube/config-public
    namespace: public
  private:
    kubeconfig: ~/.kube/config-private
    namespace: private
steps:
  - standard: configure_separate_console_sessions
  - standard: access_your_clusters
  - standard: set_up_your_namespaces
  - standard: install_skupper_in_your_namespaces
  - standard: check_the_status_of_your_namespaces
  - standard: link_your_namespaces
  - title: Deploy the Kafka cluster
    preamble: |
      In the private namespace, use the `kubectl create` and `kubectl
      apply` commands with the listed YAML files to install the
      operator and deploy the cluster and topic.
    commands:
      private:
        - run: kubectl create -f kafka-cluster/strimzi.yaml
        - run: kubectl apply -f kafka-cluster/cluster1.yaml
        - run: kubectl wait --for condition=ready --timeout 900s kafka/cluster1
    postamble: |
      **Note:**

      By default, the Kafka bootstrap server returns broker addresses
      that include the Kubernetes namespace in their domain name.
      When, as in this example, the Kafka client is running in a
      namespace with a different name from that of the Kafka cluster,
      this prevents the client from resolving the Kafka brokers.

      To make the Kafka brokers reachable, set the `advertisedHost`
      property of each broker to a domain name that the Kafka client
      can resolve at the remote site.  In this example, this is
      achieved with the following listener configuration:

      ~~~ yaml
      spec:
        kafka:
          listeners:
            - name: plain
              port: 9092
              type: internal
              tls: false
              configuration:
                brokers:
                  - broker: 0
                    advertisedHost: cluster1-kafka-0.cluster1-kafka-brokers
      ~~~

      See [Advertised addresses for brokers][advertised-addresses] for
      more information.

      [advertised-addresses]: https://strimzi.io/docs/operators/in-development/configuring.html#property-listener-config-broker-reference
  - title: Expose the Kafka cluster
    preamble: |
      In the private namespace, use `skupper expose` with the
      `--headless` option to expose the Kafka cluster as a headless
      service on the Skupper network.

      Then, in the public namespace, use `kubectl get service` to
      check that the `cluster1-kafka-brokers` service appears after a
      moment.
    commands:
      private:
        - run: skupper expose statefulset/cluster1-kafka --headless --port 9092
      public:
        - run: kubectl get service/cluster1-kafka-brokers
  - title: Deploy the application services
    preamble: |
      In the public namespace, use the `kubectl apply` command with
      the listed YAML files to install the application services.
    commands:
      public:
        - await: service/cluster1-kafka-brokers
        - run: kubectl apply -f order-processor/kubernetes.yaml
        - run: kubectl apply -f market-data/kubernetes.yaml
        - run: kubectl apply -f frontend/kubernetes.yaml
  - standard: test_the_application
  - standard: accessing_the_web_console
  - standard: cleaning_up
    commands:
      private:
        - run: skupper delete
        - run: kubectl delete -f kafka-cluster/cluster1.yaml
        - run: kubectl delete -f kafka-cluster/strimzi.yaml
      public:
        - run: skupper delete
        - run: kubectl delete -f frontend/kubernetes.yaml
        - run: kubectl delete -f market-data/kubernetes.yaml
        - run: kubectl delete -f order-processor/kubernetes.yaml
