title: Accessing a Kafka cluster using Skupper
subtitle: Use public cloud resources to process data from a private Kafka cluster
github_actions_url: https://github.com/ssorj/skupper-example-kafka/actions/workflows/main.yaml
overview: |-
  XXX

  This example is a simple Kafka application that shows how you can
  use Skupper to access a Kafka cluster at a remote site without
  exposing it to the public internet.

  It contains two services:

  * A Kafka cluster named "cluster1" running in a private data center.
    The cluster has a topic named "topic1".

  * A Kafka client running in the public cloud.  It sends 10 messages
    to "topic1" and then receives them back.

  To set up the Kafka cluster, this example uses the Kubernetes
  operator from the [Strimzi][strimzi] project.  The Kafka client is a
  Java application built using [Quarkus][quarkus].

  The example uses two Kubernetes namespaces, "private" and "public",
  to represent the private data center and public cloud.

  [strimzi]: https://strimzi.io/
  [quarkus]: https://quarkus.io/
prerequisites: !string prerequisites
contexts:
  public:
    kubeconfig: ~/.kube/config-public
    namespace: public
  private:
    kubeconfig: ~/.kube/config-private
    namespace: private
steps:
  - title: Configure separate console sessions
    preamble: !string configure_separate_console_sessions_preamble
    commands:
      public:
        - run: export KUBECONFIG=~/.kube/config-public
      private:
        - run: export KUBECONFIG=~/.kube/config-private
  - title: Log in to your clusters
    preamble: !string log_in_to_your_clusters_preamble
  - title: Set up your namespaces
    preamble: !string set_up_your_namespaces_preamble
    commands:
      public:
        - run: kubectl create namespace public
        - run: kubectl config set-context --current --namespace public
      private:
        - run: kubectl create namespace private
        - run: kubectl config set-context --current --namespace private
  - title: Install Skupper in your namespaces
    preamble: !string install_skupper_in_your_namespaces_preamble
    commands:
      public:
        - run: skupper init
          await: [deployment/skupper-service-controller, deployment/skupper-router]
      private:
        - run: skupper init --ingress none
          await: [deployment/skupper-service-controller, deployment/skupper-router]
  - title: Link your namespaces
    preamble: !string link_your_namespaces_preamble
    commands:
      public:
        - run: skupper token create ~/public.token
      private:
        - run: skupper link create ~/public.token
        - run: skupper link status --wait 30
  - title: Deploy the Kafka cluster
    preamble: |-
      In the private namespace, use the `kubectl create` and `kubectl
      apply` commands with the listed YAML files to install the
      operator and deploy the cluster and topic.
    commands:
      private:
        - run: kubectl create -f kafka-cluster/strimzi.yaml
        - run: kubectl apply -f kafka-cluster/cluster1.yaml
        - run: kubectl wait --for condition=ready --timeout 540s kafka/cluster1
  - title: Expose the Kafka cluster
    preamble: |-
      In the private namespace, use `skupper expose` with the
      `--headless` option to expose the Kafka cluster as a headless
      service on the Skupper network.

      Then, in the public namespace, use `kubectl get services` to
      check that the `cluster1-kafka-brokers` service appears after a
      moment.
    commands:
      private:
        - run: skupper expose statefulset/cluster1-kafka --headless --port 9092
      public:
        - run: kubectl get services
          await: [service/cluster1-kafka-brokers]
  - title: XXX
    commands:
      public:
        - run: kubectl apply -f order-processor/order-processor.yaml
        - run: kubectl apply -f frontend/frontend.yaml
          sleep: 86400
cleaning_up:
  preamble: !string cleaning_up_preamble
  commands:
    private:
      - run: skupper delete
      - run: kubectl delete -f kafka-cluster/cluster1.yaml
      - run: kubectl delete -f kafka-cluster/strimzi.yaml
    public:
      - run: skupper delete
      - run: kubectl delete -f frontend/frontend.yaml
      - run: kubectl delete -f order-processor/order-processor.yaml
next_steps: !string next_steps
